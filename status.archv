#!/usr/bin/env sh
# ______        ____  __   ____  _        _
#|  _ \ \      / /  \/  | / ___|| |_ __ _| |_ _   _ ___
#| | | \ \ /\ / /| |\/| | \___ \| __/ _` | __| | | / __|
#| |_| |\ V  V / | |  | |  ___) | || (_| | |_| |_| \__ \
#|____/  \_/\_/  |_|  |_| |____/ \__\__,_|\__|\__,_|___/
#
#Simple Program to set the Status for the DWM Bar.
#The Semi-colon separates the status into topbar and bottom bar texts.
#Network Monitor still needs some work.
#
#Dependencies -> nmcli, xbacklight, amixer, lm_sensors, curl.

#Get the connectivity params
getConnectionParams(){
	interface=$(nmcli | awk -F: '/connected to/ {print $1}')
	[ $interface='wlo1' ] && io=$(awk '/wlo1/ {print "inB="$2, "outB="$10}' /proc/net/dev)
	[ $interface='lo' ] && io=$(awk '/lo/ {print "inB="$2, "outB="$10}' /proc/net/dev)
	
	eval $io
	now=$(date +%S)
	now=${now#0}
}

#Calculate Connection Speeds
calcSpeeds(){
	val=$1
	prevVal=$2
	timeDiff=$3
	if [ ! $timeDiff -eq 0 ]; then
		vel=$(echo "($val-$prevVal)/$timeDiff" | bc)
	    	#vel=${vel#-}
	    	if [ $vel -ge 1048576 ]; then
			vel=$(echo "scale=1;$vel/1048576" | bc)
			echo "$vel MB/s"
		elif [ $vel -ge 1024 ]; then
			vel=$(echo "scale=1;$vel/1024" | bc)
			echo "$vel KB/s"
		elif [ $vel -lt 1 ]; then
			echo "0 B/s"
		else
			echo "$vel B/s"
		fi
	else
		echo "0 B/s"
	fi
}

#Connection Details
getNetworkTraffic(){
	if nmcli | grep 'connected to' > /dev/null; then
		getConnectionParams
		in=$inB
		out=$outB
		timeDiffNT=$(($now-$prevTimeNT))

		inSpeed=$(calcSpeeds $in $prevInB $timeDiffNT)
		outSpeed=$(calcSpeeds $out $prevOutB $timeDiffNT)

		prevInB=$in
		prevOutB=$out
		prevTimeNT=$now

		if [ $interface="wlo1" ]; then
			cmd=$(nmcli device wifi list | awk '/^*/ {print "ssid="$3, "signal="$8}')
			eval $cmd
			echo "🌐 $ssid [$signal%] ⬆ $outSpeed ⬇ $inSpeed" #▲▼
		else
			ssid=$(nmcli | awk '/connected/ {print $4 }')
			echo "🌐 $ssid ⬆ $outSpeed ⬇ $inSpeed"
		fi
	else
		availConn=$(nmcli device wifi list | awk '$7 > 60' | wc -l)
		echo "🌐 Available [$(expr $availConn - 1) *]"
	fi
}

#Get Brightness
getBacklight(){
	bcklit=$(xbacklight -get)
	bcklit=${bcklit%.*}
	[ $bcklit -le 50 ] && echo "🔅 $bcklit%" || echo "🔆 $bcklit%"
}

#Volume Params
getVol(){
	if amixer get Master | grep '\[on\]' > /dev/null; then
		vol=$(amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/')
		if [ $vol -gt 0 ] && [ $vol -le 33 ]; then
			echo "🔈 $vol%"
		elif [ $vol -gt 33 ] && [ $vol -le 66 ]; then
			echo "🔉 $vol%"
		else
			echo "🔊 $vol%"
		fi
		#echo "Vol : $vol% "
	else
		#echo Volume : --
		echo "Mute 🔇"
	fi
}

#Local current time
getTime(){
	echo "🗓 $(date +%B\ %d\,\ %Y\ %T\ %Z)"
}

#Get the current Memory stats
getMemStats(){
	echo "🧠 $(free -h | awk '/^Mem/ {print $3 " / " $2}')"
}

#Battery Stats
getBatStats(){
	bat=$(acpi -b)
	if echo $bat | grep 'Full' > /dev/null; then
		echo "🔋 100% ⚡"
	elif echo $bat | grep 'Charging' > /dev/null; then
		echo "🔋 $(echo $bat | awk '{print $4 " 🔌 "}')"
	elif echo $bat | grep 'Discharging' > /dev/null; then
		echo "🔋 $(echo $bat | awk '{print $4 " - "}')"
	else
		echo "🔋 $(echo $bat |awk '{print $4 ", ?"}')"
	fi
}

#CPU Temp
getTemp(){
	echo "🌡 $(sensors | awk '/^temp1/ {print $2 $3}')"
}

#CPU Load Avg
getLoad(){
	load=$(awk '{print $1}' /proc/loadavg)
	numOfCores=$(grep 'processor' /proc/cpuinfo | wc -l)
	loadAvg=$(echo "scale=2;($load/$numOfCores*100)" | bc)
	echo "💿 $loadAvg%"
}

#Weather Report
getWeather(){
	if $(ping -qc 1 1.1 > /dev/null); then
		#wttr.in->>l=location, c=weather condition, C=wether condition text,
		#t=Temp, w=wind dir and speed, m=moonphase, M=moonday, p=precipitation,
		#location="Your,City"
		#curl -s wttr.in/$location\?format="%l:+%c+%C,+%t,+%w,+%m+%M"
		#curl -s wttr.in\?format="%l:+%c+%C,+%t,+%w,+%m+%M"
		report=$(curl -s wttr.in\?format='%c+%C,+%t,+%w,+%m+%M')
		SECONDS=0
		if [ -z "$report" ] || $(echo "$report" | grep -E 'html|Unknown|Sorry' > /dev/null); then
			echo "Weather Report Unavailable"
		else
			echo "$report"
		fi
	else
		echo "Network Unavailable"
	fi
}

#Music Player
trackUpdate(){
	status=$(mpc status)
	track=$(mpc -q current)
	$(echo "$status" | grep -E '\[playing\]' > /dev/null) && echo " 🎵 $track" || 
		echo " ⏸ $track"
}

#Set Initial Values
getConnectionParams
prevInB=$inB
prevOutB=$outB
prevTimeNT=$now
weather=$(getWeather)
sp=" • "

while sleep 1s; do
	[ $(($SECONDS / 60)) -ge 30 ] || $(echo $report | grep 'Unavailable' > /dev/null) && weather=$(getWeather)
	xsetroot -name "$(trackUpdate);$sp$weather$sp$(getNetworkTraffic)$sp$(getBacklight)$sp$(getVol)$sp$(getLoad)$sp$(getTemp)$sp$(getMemStats)$sp$(getBatStats)$sp$(getTime)$sp"
done

